#!/bin/node
/*
 * `cw`: Utility to expedite scraping, formatting and uploading `codewars`
 *       challenges.
 * 
 * Depends: `curl`, `jq`
 * Environment: -
 */

// Useful things:
//
// * Codewars API: https://dev.codewars.com/#introduction
// * Web scraping: https://beshaimakes.com/js-scrape-data/
// * Command-line argument parsing: https://nodejs.org/en/knowledge/command-line/how-to-parse-command-line-arguments/
// * Array of all arguments: `process.argv`
// * Return a value to the shell: `process.exitCode = N`
// * Exit immediately with a value: `process.exit(N)`
//
// When in doubt: https://nodejs.org/docs/latest-v17.x/api/process.html#process-events

const usage = () => {
	let usage = `\
		usage: cw -s|--search[=<search_spec>] <query>
		       cw -p|--pull <challenge_spec>
		       cw -h|--help
		       <search_spec>: name, lang, rank, id
		       <challenge_spec>: <ID>, <URL>
	`;
	process.stderr.write(usage.replaceAll('\t', ''));
	process.exit();
};

const error = (msg = 'error') => {
	process.stderr.write(`cw: ${msg}\n`);
	process.exit(1);
};

// TODO: the ol' search 'n' scrape
const search = (query, type = 'name') => {
	console.log('search:', 'query:', query, 'type:', type); // debug
};

// TODO: scrape the challenge title and description, *including test cases*
const pull = (id) => {
	console.log('pull: ', id); // debug
};

const parseOpts = (args) => {
	const action = {action: '', args: []};

	if (/^(-s|--search=?)(name|id|rank|lang)?$/.test(args[0])) {
		action.action = 'search';
		action.args = [args.slice(1).join(' ')];

		if (RegExp.$1 == '--search=') action.args.push(RegExp.$2);
			
		if (RegExp.$1 == '-s' && /(name|id|rank|lang)/.test(args[1])) {
			action.args = [args.slice(2).join(' '), args[1]];
		}

	} else if (/^(-p|--pull)$/.test(args[0])) {
		action.action = 'pull';
		action.args = args.slice(1).join(' ');

	} else if (/^(-h|--help)$/.test(args[0])) {
		action.action = 'help';

	} else {
		error(`unrecognised option: ${args.join(' ')}`);
	}

	return action;
};

const main = () => {
	const args = process.argv.slice(2);
	const action = parseOpts(args);

	switch (action.action) {
		case 'search':
			search(action.args[0], action.args[1]);
			break;
		case 'pull':
			pull(action.args);
			break;
		case 'help':
			usage();
			break;
		default:
			process.exitCode = 1;
			usage();
	}
}

main();

